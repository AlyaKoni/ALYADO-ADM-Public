#Requires -Version 2.0

<#
    Copyright (c) Alya Consulting, 2019-2023

    This file is part of the Alya Base Configuration.
    https://alyaconsulting.ch/Loesungen/BasisKonfiguration
    The Alya Base Configuration is free software: you can redistribute it
    and/or modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.
    Alya Base Configuration is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of 
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    Public License for more details: https://www.gnu.org/licenses/gpl-3.0.txt

    Diese Datei ist Teil der Alya Basis Konfiguration.
    https://alyaconsulting.ch/Loesungen/BasisKonfiguration
    Die Alya Basis Konfiguration ist eine Freie Software: Sie können sie unter den
    Bedingungen der GNU General Public License, wie von der Free Software
    Foundation, Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
    veröffentlichten Version, weiter verteilen und/oder modifizieren.
    Die Alya Basis Konfiguration wird in der Hoffnung, dass sie nützlich sein wird,
    aber OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
    Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FUER EINEN BESTIMMTEN ZWECK.
    Siehe die GNU General Public License fuer weitere Details:
    https://www.gnu.org/licenses/gpl-3.0.txt


    History:
    Date       Author               Description
    ---------- -------------------- ----------------------------
    04.11.2021 Konrad Brunner       Initial Version
    15.10.2024 Konrad Brunner       Fixed path, 64bit powershell, error handling, logging

#>


[CmdletBinding()]
param (
)

$exitCode = 0
$AlyaTimeString = (Get-Date).ToString("yyyyMMddHHmmssfff")
$AlyaScriptName = Split-Path $PSCommandPath -Leaf

if (![System.Environment]::Is64BitProcess)
{
    Write-Host "Launching 64bit PowerShell"
    $arguments = ""
    foreach($key in $MyInvocation.BoundParameters.keys)
    {
        switch($MyInvocation.BoundParameters[$key].GetType().Name)
        {
            "SwitchParameter" {if($MyInvocation.BoundParameters[$k].IsPresent) { $arguments += "-$key " } }
            "String"          { $arguments += "-$key `"$($MyInvocation.BoundParameters[$key])`" " }
            "Int32"           { $arguments += "-$key $($MyInvocation.BoundParameters[$key]) " }
            "Boolean"         { $arguments += "-$key `$$($MyInvocation.BoundParameters[$key]) " }
        }
    }
    $sysNativePowerShell = "$($PSHOME.ToLower().Replace("syswow64", "sysnative"))\powershell.exe"
    $pinfo = New-Object System.Diagnostics.ProcessStartInfo
    $pinfo.FileName = $sysNativePowerShell
    $pinfo.Arguments = "-ex bypass -file `"$PSCommandPath`" $arguments"
    $pinfo.RedirectStandardError = $true
    $pinfo.RedirectStandardOutput = $true
    $pinfo.CreateNoWindow = $true
    $pinfo.UseShellExecute = $false
    $p = New-Object System.Diagnostics.Process
    $p.StartInfo = $pinfo
    $p.Start() | Out-Null
    $stdout = $p.StandardOutput.ReadToEnd()
    if (-Not [string]::IsNullOrEmpty($stdout)) { Write-Host $stdout }
    $stderr = $p.StandardError.ReadToEnd()
    if (-Not [string]::IsNullOrEmpty($stderr)) { Write-Error $stderr }
    $exitCode = $p.ExitCode
}
else
{

    Start-Transcript -Path "C:\ProgramData\AlyaConsulting\Logs\$($AlyaScriptName)-SetLockScreen-$($AlyaTimeString).log" -Force

    try
    {
        $ErrorActionPreference = "Stop"

        $WallpaperUrl = "https://alyainfpstrg001.blob.core.windows.net/corporate/backgrounds/Hintergrund_3000_2000.jpg"

        $path = "C:\ProgramData\AlyaConsulting\Background"
        if (-Not (Test-Path $path))
        {
            New-Item -ItemType Directory -Force -Path $path | Out-Null
        }

        Write-Host "downloading image"
        $localFile = "$path\"+(Split-Path -Path $WallpaperUrl -Leaf)
        $localFileTmp = "$path\"+(Split-Path -Path $WallpaperUrl -Leaf)+".tmp"
        Start-BitsTransfer -Source $WallpaperUrl -Destination $localFileTmp

        Write-Host "replacing stored image"
        if (Test-Path $localFile)
        {
            $localFileHash = Get-FileHash -Path $localFile
            $localFileTmpHash = Get-FileHash -Path $localFileTmp
            if ($localFileHash.Hash -eq $localFileTmpHash.Hash)
            {
                Remove-Item -Path $localFileTmp -Force
            }
        }
        if (Test-Path $localFileTmp)
        {
            Move-Item -Path $localFileTmp -Destination $localFile -Force
        }

        $tkdwnYes = "Y"
        $admins = "Administrators"
        if ((Get-WinSystemLocale).Name.IndexOf("de-") -gt -1)
        {
            $tkdwnYes = "J"
            $admins = "Administratoren"
        }

        # Clearing LockScreen cache
        Write-Host "clearing LockScreen cache"
        Start-Process -filePath "$env:SystemRoot\system32\takeown.exe" -ArgumentList "/F `"$env:ProgramData\Microsoft\Windows\SystemData`" /R /A /D $tkdwnYes" -NoNewWindow -Wait
        Start-Process -filePath "$env:SystemRoot\system32\icacls.exe" -ArgumentList "`"$env:ProgramData\Microsoft\Windows\SystemData`" /grant $($admins):'(OI)(CI)F' /T" -NoNewWindow -Wait
        Start-Process -filePath "$env:SystemRoot\system32\icacls.exe" -ArgumentList "`"$env:ProgramData\Microsoft\Windows\SystemData\S-1-5-18\ReadOnly`" /reset /T" -NoNewWindow -Wait
        Remove-Item -Path "$env:ProgramData\Microsoft\Windows\SystemData\S-1-5-18\ReadOnly\LockScreen_Z\*" -Force

        # Copy image to LockScreen
        Write-Host "copy image to LockScreen"
        Start-Process -filePath "$env:SystemRoot\system32\takeown.exe" -ArgumentList "/F `"$env:SystemRoot\Web\Screen`" /R /A /D $tkdwnYes" -NoNewWindow -Wait
        Start-Process -filePath "$env:SystemRoot\system32\icacls.exe" -ArgumentList "`"$env:SystemRoot\Web\Screen`" /grant $($admins):'(OI)(CI)F' /T" -NoNewWindow -Wait
        Start-Process -filePath "$env:SystemRoot\system32\icacls.exe" -ArgumentList "`"$env:SystemRoot\Web\Screen`" /reset /T" -NoNewWindow -Wait
        $images = Get-ChildItem -Path "$env:SystemRoot\Web\Screen" -Filter *.jpg
        foreach ($image in $images)
        {
            if (-Not (Test-Path ($image.FullName+".orig")))
            {
                Move-Item -Path $image.FullName -Destination ($image.FullName+".orig") -Force
            }
        }
        Copy-Item -Path $localFile -Destination "$env:SystemRoot\Web\Screen\img100.jpg" -Force

        Write-Host "done $exitCode"
    }
    catch
    {   
        try { Write-Error ($_.Exception | ConvertTo-Json -Depth 1) -ErrorAction Continue } catch {}
        Write-Error ($_.Exception) -ErrorAction Continue
        $exitCode = -3
    }

    Stop-Transcript
}

exit $exitCode
