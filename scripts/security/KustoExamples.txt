Examples:
	Misc: https://azure.github.io/fta-kusto100knocks/docs/advanced/
	Sentinel: https://learnsentinel.blog/2022/03/16/maintaining-a-well-managed-azure-ad-tenant-with-kql/
	Intune: https://techcommunity.microsoft.com/t5/device-management-in-microsoft/microsoft-intune-and-azure-log-analytics/ba-p/463145
	Storage costs: https://docs.microsoft.com/en-us/azure/azure-monitor/logs/manage-cost-storage

Log count per table:
union withsource=sourceTable *
| project sourceTable
| summarize count() by sourceTable


Log count per Category:
AzureDiagnostics
| summarize LogCount = count() by Category
| sort by LogCount desc


SignIn Errors with external json link:
let ResolvedErrorCodes = externaldata(code: string, Message: string)['https://raw.githubusercontent.com/f-bader/EntraID-ErrorCodes/main/EntraIDErrorCodes.json'] with (format='multijson');
union isfuzzy=true SigninLogs, AADNonInteractiveUserSignInLogs
| where ResultType != 0
| lookup ResolvedErrorCodes on $left.ResultType == $right.code
| extend ResultDescription = iff(ResultDescription == "Other",iff(isempty(Message),"Other",Message),ResultDescription)
| project-away Message
| project-reorder TimeGenerated, ResultType, ResultDescription


Usage: 
Usage 
| where TimeGenerated > ago(32d)
| where StartTime >= startofday(ago(31d)) and EndTime < startofday(now())
| where IsBillable == true
| summarize TotalGB = sum(Quantity) / 1000 by Solution, DataType
| sort by TotalGB desc
Usage 
| where TimeGenerated > ago(32d)
| where StartTime >= startofday(ago(31d)) and EndTime < startofday(now())
| where IsBillable == true
| summarize TotalGB = sum(Quantity) / 1000. by bin(StartTime, 1d), DataType 
| render columnchart
Usage 
| where TimeGenerated > ago(32d)
| where StartTime >= startofday(ago(31d)) and EndTime < startofday(now())
| where IsBillable == true
| summarize TotalGB = sum(Quantity) / 1000. by bin(StartTime, 1d), Solution 
| render columnchart
AzureDiagnostics
| where TimeGenerated > ago(32d)
| where _IsBillable == true
| summarize count(), TotalGB=sum(_BilledSize) / 1000000000 by ResourceProvider, ResourceId, Category
| sort by TotalGB desc
Event
| where TimeGenerated > ago(32d)
| where _IsBillable == true
| summarize count(), Bytes=sum(_BilledSize) by EventID, bin(TimeGenerated, 1d)
| render columnchart
SystemEvents
| where timestamp > ago(32d)
| where type == "Billing"
| extend BillingTelemetryType = tostring(dimensions["BillingTelemetryType"])
| extend BillingTelemetrySizeInBytes = todouble(measurements["BillingTelemetrySize"])
| summarize sum(BillingTelemetrySizeInBytes) by BillingTelemetryType, bin(timestamp, 1d) | render barchart


Heartbeat:
Heartbeat 
| where TimeGenerated > startofday(ago(31d))
| summarize nodes = dcount(Computer) by bin(TimeGenerated, 1d)    
| render timechart


Security Alerts:
SecurityAlert
| where TimeGenerated > ago(2d)
| extend HostName = tostring(parse_json(Entities)[0]['HostName'])
| extend AccountName = tostring(parse_json(Entities)[1]['Name'])
| extend ActivityStartTime = parse_json(ExtendedProperties)['Activity start time (UTC)']
| extend ActivityEndTime = parse_json(ExtendedProperties)['Activity end time (UTC)']
| extend AttackerSourceIp = tostring(parse_json(ExtendedProperties)['Attacker source IP'])
| extend _AttackerSourceIp = extract("IP Address: ([^,]+)", 1, AttackerSourceIp)
| extend NumberOfExistingAccountsUsedBySourceToSignIn = parse_json(ExtendedProperties)['Number of existing accounts used by source to sign in']
| extend NumberOfFailedAuthenticationAttemptsToHost = parse_json(ExtendedProperties)['Number of failed authentication attempts to host']
| extend NumberOfNonexistentAccountsUsedBySourceToSignIn = parse_json(ExtendedProperties)['Number of nonexistent accounts used by source to sign in']
| extend TopAccountsWithFailedSignInAttempts = parse_json(ExtendedProperties)['Top accounts with failed sign in attempts (count)']
| extend WasRdpSessionInitiated = parse_json(ExtendedProperties)['Was RDP session initiated']
| project TimeGenerated,
          AlertName,
          SystemAlertId,
          AlertType,
          HostName,
          AccountName,
          StartTime,
          ProcessingEndTime,
          ActivityStartTime,
          ActivityEndTime,
          _AttackerSourceIp,
          NumberOfExistingAccountsUsedBySourceToSignIn,
          NumberOfFailedAuthenticationAttemptsToHost,
          TopAccountsWithFailedSignInAttempts,
          WasRdpSessionInitiated
| sort by TimeGenerated desc


Conditional Access Policy Report Failures:
let policyIDs = dynamic(["244af2aa-xxx", "9a666754-xxx", "cbcb707a-xxx", "601de348-xxx"]);
SigninLogs
| where TimeGenerated > ago(1d)
| project
    ConditionalAccessPolicies,
    TimeGenerated,
    UserType,
    UserPrincipalName,
    AppDisplayName,
    ResourceDisplayName,
    CorrelationId,
    Status,
    ClientAppUsed,
    IPAddress,
    DeviceDetail,
    LocationDetails,
    NetworkLocationDetails
| extend 
    deviceName = DeviceDetail.displayName, 
    deviceId = DeviceDetail.deviceId, 
    deviceOs = DeviceDetail.operatingSystem, 
    deviceTrust = DeviceDetail.trustType,
    locationCountry = LocationDetails.countryOrRegion,
    locationState = LocationDetails.state,
    locationCity = LocationDetails.city,
    networkKnown = NetworkLocationDetails != "[]",
    networkDetails = tostring(NetworkLocationDetails),
    statusCode = Status.errorCode
| where ConditionalAccessPolicies != "[]"
| where '*' == '*' or '*' == UserPrincipalName
| where "All users" == "All users" or UserPrincipalName has "All users"
| where "All apps" == "All apps" or AppDisplayName has "All apps"
| mv-expand ConditionalAccessPolicies
| where ConditionalAccessPolicies["id"] in (policyIDs)
| extend
    TimeGeneratedStr = strcat(format_datetime(TimeGenerated, 'yyyy-MM-dd'), 'T', format_datetime(TimeGenerated, 'HH:mm:ss'), 'Z'),
    result = ConditionalAccessPolicies["result"],
    failureReason = tostring(Status["failureReason"]),
    policyId = ConditionalAccessPolicies["id"],
    policyName = ConditionalAccessPolicies["displayName"]
| project-away ConditionalAccessPolicies
| extend filterResult = case("Failure" == "Total", "", "Failure" == "Success", "uccess", "Failure" == "Failure", "ailure", "Failure" == "User action required", "nterrupted", "ot")
| where result contains filterResult
| project 
    TimeGeneratedStr, 
    policyId,
    policyName,
    UserType, 
    UserPrincipalName, 
    AppDisplayName, 
    result, 
    CorrelationId, 
    statusCode, 
    ResourceDisplayName, 
    ClientAppUsed, 
    IPAddress, 
    deviceName, 
    deviceId, 
    deviceOs, 
    deviceTrust, 
    locationCountry, 
    locationState, 
    locationCity,
    networkKnown,
    networkDetails
| sort by TimeGeneratedStr desc

